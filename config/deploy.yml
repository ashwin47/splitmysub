# Name of your application. Used to uniquely configure containers.
service: splitmysub

# Name of the container image.
image: ashwinmk2016/splitmysub

# Deploy to these servers.
servers:
  web:
    - 146.190.118.95
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: splitmysubscription.xyz

# Credentials for your image host.
registry:
  # Specify the registry server, if you're not using Docker Hub
  server: registry.digitalocean.com/super-registry
  username:
    - DOCKER_REGISTRY_TOKEN
  password:
    - DOCKER_REGISTRY_TOKEN

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - SMTP_USERNAME
    - SMTP_PASSWORD
    - RESEND_API_KEY
    - ADMIN_PASSWORD
  clear:
    # Rails environment
    RAILS_ENV: production
    
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: true

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Match this to any external database server to configure Active Record correctly
    # Use splitmysub-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug
    
    APP_HOST: splitmysubscription.xyz
    APP_PROTOCOL: https
    
    # Vite configuration for production
    VITE_RUBY_HOST: 0.0.0.0
    VITE_RUBY_PORT: 3036
    
    # Asset host for CDN (optional)
    # ASSET_HOST: https://cdn.splitmysub.example.com
    
    # SMTP Configuration (non-sensitive settings)
    # Flexible defaults - can be overridden by environment variables
    SMTP_ADDRESS: smtp.gmail.com  # Default: Gmail
    SMTP_PORT: 587
    SMTP_AUTHENTICATION: plain
    SMTP_ENABLE_STARTTLS_AUTO: true

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"
  runner: app exec --interactive --reuse "bin/rails runner"
  seed: app exec --reuse "bin/rails db:seed"
  migrate: app exec --reuse "bin/rails db:migrate"

# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "splitmysub_storage:/rails/storage"
  - "splitmysub_db:/rails/db"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/vite

# Configure the image builder.
builder:
  arch: amd64
  # Build with proper context for Rails + Vite
  context: .
  dockerfile: Dockerfile
  
  # Build arguments for multi-stage builds
  args:
    RUBY_VERSION: 3.4.4
    NODE_VERSION: 20.18.1

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Use a different ssh user than root
# ssh:
#   user: app

# Boot configuration
boot:
  limit: 10 # Limit to 10 containers per host
  wait: 2   # Wait 2 seconds between boots

# Logging configuration
logging:
  driver: json-file
  options:
    max-size: "10m"
    max-file: "3"

# Use accessory services (secrets come from .kamal/secrets).
# Uncomment and configure these if you need external services
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data
